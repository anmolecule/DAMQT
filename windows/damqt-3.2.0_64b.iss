; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DAMQT320"
#define MyAppVersion "3.2.0"
#define MyAppExeName "DAMQT320.exe"
#define MyShortAppName "DAMQT320"
#define MyLongAppName "DAMQT320"
;#define INI_OpenBabelDirKey "OpenBabelDirectory"
#define INI_DataDirKey "DataDirectory"

; IMPORTANT !!! Check that the following variables are pointing to the right addresses (See sources below for details)
#define DAM320_DIR "D:\DAMQT\build\src\DAM320"  
#define DAMZERNIKE_DIR "D:\DAMQT\build\src\DAMZernike320"
#define DAMGUI320_DIR "D:\DAMQT\build\src\DAMGUI320"
#define IMAGES_DIR "D:\DAMQT\src\DAMGUI320\images"
#define INTERFACES_DIR "D:\DAMQT\build\src\interfaces_320" 
;#define INTERFACES_PYTHON_DIR "D:\DAMQT\src\interfaces_320"
#define LIB_FORTRAN_DIR "D:\msys64\mingw64\lib"
#define LICENSE_DIR "D:\DAMQT\license"
#define MANUAL_DIR "D:\DAMQT\doc\manual"
#define MINGW_DLL_DIR "D:\msys64\mingw64\bin"
#define MINGW_LIB_DIR "D:\msys64\mingw64\lib"
;#define OPENBABEL_DIR "C:\Program Files\OpenBabel-3.1.1"
;#define OPENBABEL_DATA_DIR "C:\Users\rafa\AppData\Roaming\OpenBabel-3.1.1\data"
;#define OPENBABEL_DOC_DIR "C:\Users\rafa\AppData\Roaming\OpenBabel-3.1.1\doc"
;#define OPENBABEL_EXAMPLES_DIR "C:\Users\rafa\AppData\Roaming\OpenBabel-3.1.1\examples"
;#define MSYS64_DLL_DIR "C:\msys64\usr\bin"
;#define PYTHON_DIR "C:\msys64\usr\bin"
;#define PYTHON_LIB_DIR "D:\msys64\mingw64\bin\"
#define OUTPUT_DIR "D:\DAMQT\windows"
#define SAMPLES_DIR "D:\DAMQT\samples"
#define TDAM320_DIR "D:\DAMQT\build\src\TDAM320"
#define QT_BIN_DIR "D:\msys64\mingw64\bin"
#define QT_LIB_DIR "D:\msys64\mingw64\lib"
#define QT_PLATFORMS_DIR "D:\msys64\mingw64\share\qt5\plugins\platforms"
;#define OPENGL32_DIR "D:\msys64\mingw64\bin"
#define OPENGL32_DIR  "C:\Windows\SYSTEM32"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId= {{353DEA0A-8ED9-43E7-BF3F-B67061088F8C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile="{#LICENSE_DIR}\COPYING"
OutputDir="{#OUTPUT_DIR}"
OutputBaseFilename=DAMQT320_64b_setup
SetupIconFile={#IMAGES_DIR}\damqt.ico
Compression=lzma
SolidCompression=yes
UninstallDisplayIcon="{app}\damqt.ico"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
;Name: "greek"; MessagesFile: "compiler:Languages\Greek.isl"
;Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
;Name: "hungarian"; MessagesFile: "compiler:Languages\Hungarian.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"
;Name: "serbiancyrillic"; MessagesFile: "compiler:Languages\SerbianCyrillic.isl"
;Name: "serbianlatin"; MessagesFile: "compiler:Languages\SerbianLatin.isl"
Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Dirs]
;Name: {code:GetOpenBabelDir}; Check: not OpenBabelDirExists; Flags:uninsneveruninstall; Permissions: users-modify
Name: {code:GetDataDir}; Check: not DataDirExists; Flags:uninsneveruninstall; Permissions: users-modify

[Files]
; DAM320 exec files
Source: "{#DAM320_DIR}\compareplt320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMDEN320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMDENGRAD320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMFIELD320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMFIELDPNT320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMFORCES320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMFRAD320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMGTO320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMISODEN320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMISOPOT320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMMULTROT320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMORB320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMPOT320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMSGHOLE320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\DAMSTO320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\dmat_GAUSSIAN_to_DAM.exe"; DestDir: "{app}"; Flags: ignoreversion

Source: "{#DAM320_DIR}\readcnt.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\readdamqt320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\readplt320.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\sgbs2sxyz.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAM320_DIR}\subtractplt320.exe"; DestDir: "{app}"; Flags: ignoreversion

; DAMZernike exec files
Source: "{#DAMZERNIKE_DIR}\DAMZernike-Jacobi_GTO.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAMZERNIKE_DIR}\DAMZernike-Jacobi_STO.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DAMZERNIKE_DIR}\DAMDENZJ320.exe"; DestDir: "{app}"; Flags: ignoreversion

; GUI320 exec files
Source: "{#DAMGUI320_DIR}\DAMQT320.exe"; DestDir: "{app}"; Flags: ignoreversion

; interfaces exec files
Source: "{#INTERFACES_DIR}\GAUSS_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#INTERFACES_DIR}\MOLEKEL_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#INTERFACES_DIR}\MOLPRO_out_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#INTERFACES_DIR}\NWChem_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#INTERFACES_DIR}\TURBOMOLE_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#INTERFACES_DIR}\Mopac_aux_interface.exe"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#INTERFACES_PYTHON_DIR}\MOLPRO_xml_interface.py"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#INTERFACES_PYTHON_DIR}\MOPAC_aux_interface.py"; DestDir: "{app}"; Flags: ignoreversion

; TDAM320 exec files
Source: "{#TDAM320_DIR}\DAMTOPOGRAPHY.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#TDAM320_DIR}\DAMMESPIMIZER.exe"; DestDir: "{app}"; Flags: ignoreversion

; Manual
Source: "{#MANUAL_DIR}\DAMQT_3.2.0_manual.pdf"; DestDir: "{app}"; Flags: ignoreversion

; Python
;Source: "{#PYTHON_DIR}\python2.7.exe"; DestDir: "{app}"; Flags: ignoreversion

; Dynamic libraries for MINGW
Source: "{#MINGW_DLL_DIR}\libbz2-1.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libdouble-conversion.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libfreetype-6.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libgcc_s_seh-1.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#LIB_FORTRAN_DIR}\libgfortran-4.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libgfortran-5.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libglib-2.0-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libgraphite2.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libharfbuzz-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libbrotlicommon.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libbrotlidec.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libiconv-2.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libicudt76.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libicuin76.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libicuuc76.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libintl-8.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libmd4c.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libpcre-1.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libpcre16-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libpcre2-16-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libpng16-16.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libpcre2-8-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libquadmath-0.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libstdc++-6.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libwinpthread-1.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\libzstd.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#MINGW_DLL_DIR}\opengl32.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#OPENGL32_DIR}\OPENGL32.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MINGW_DLL_DIR}\zlib1.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#PYTHON_LIB_DIR}\libpython2.7.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#MSYS64_DLL_DIR}\msys-2.0.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#MSYS64_DLL_DIR}\msys-python2.7.dll"; DestDir: "{app}"; Flags: ignoreversion


; Static libraries for MINGW
;Source: "{#MINGW_LIB_DIR}\libpng16.dll.a"; DestDir: "{app}"; Flags: ignoreversion

; Dynamic libraries for Qt5
;Source: "{#QT_BIN_DIR}\libEGL.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#QT_BIN_DIR}\libGLESv2.dll"; DestDir: "{app}"; Flags: ignoreversion

Source: "{#QT_BIN_DIR}\Qt5Core.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#QT_BIN_DIR}\Qt5Gui.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#QT_BIN_DIR}\Qt5OpenGL.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#QT_BIN_DIR}\Qt5PrintSupport.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#QT_BIN_DIR}\Qt5Widgets.dll"; DestDir: "{app}"; Flags: ignoreversion

; Static libraries for Qt5
Source: "{#MINGW_LIB_DIR}\libQt5PlatformCompositorSupport.a"; DestDir: "{app}"; Flags: ignoreversion

; Plugin for windows platform
Source: "{#QT_PLATFORMS_DIR}\qwindows.dll"; DestDir: "{app}\platforms"; Flags: ignoreversion 


; OpenBabel
;Source: "{#OPENBABEL_DIR}\*"; Check: InstallOpenBabel; DestDir: "{code:GetOpenBabelDir}";  Flags: onlyifdoesntexist recursesubdirs uninsneveruninstall
;Source: "{#OPENBABEL_DOC_DIR}\*"; Check: InstallOpenBabel; DestDir: "{userappdata}\OpenBabel-3.1.1\doc";  Flags: onlyifdoesntexist recursesubdirs uninsneveruninstall
;Source: "{#OPENBABEL_EXAMPLES_DIR}\*"; Check: InstallOpenBabel; DestDir: "{userappdata}\OpenBabel-3.1.1\examples";  Flags: onlyifdoesntexist recursesubdirs uninsneveruninstall



; Samples 
;Source: "{#SAMPLES_DIR}\*"; Check: InstallSampleData; DestDir: "{code:GetDataDir}";  Flags: confirmoverwrite recursesubdirs uninsneveruninstall
Source: "{#SAMPLES_DIR}\*"; Check: InstallSampleData; DestDir: "{code:GetDataDir}";  Flags: onlyifdoesntexist recursesubdirs uninsneveruninstall

; Images
Source: "{#IMAGES_DIR}\damqt.ico"; DestDir: "{app}";

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\damqt.ico"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"; IconFilename: "{app}\damqt.ico"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\damqt.ico"


[INI]
;Filename: "{app}\{#MyShortAppName}.ini"; Section: "{#MyShortAppName}"; Key: "OpenBabelDirectory"; String: "{code:GetOpenBabelDir}"; Flags: createkeyifdoesntexist
Filename: "{app}\{#MyShortAppName}.ini"; Section: "{#MyShortAppName}"; Key: "DataDirectory"; String: "{code:GetDataDir}"; Flags: createkeyifdoesntexist

[Registry]                          
;Root: HKCU; Subkey: "Environment"; \
;    ValueType: expandsz; ValueName: "BABEL_DATADIR"; ValueData: "{olddata};{userappdata}\OpenBabel-3.1.1\data"; \
;    Check: NeedsAddBabelDatadir('{userappdata}\OpenBabel-3.1.1\data')

[Code]
// global vars
var
//  OpenBabelDirPage: TInputDirWizardPage;
//  OpenBabelDataPage: TInputOptionWizardPage;
  DataDirPage: TInputDirWizardPage;
  SampleDataPage: TInputOptionWizardPage;
  DataDirVal: String;
//  OpenBabelDirVal: String;
//  RemoveOpenBabel: Boolean;

 
//function GetOpenBabelDir(Param: String): String;
//begin
//  { Return the selected OpenBabelDir }
//  Result := OpenBabelDirPage.Values[0];
//end;
 
//function GetDefaultOpenBabelDirectory() : String;
//begin
//  Result := ExpandConstant('{#OPENBABEL_DIR}');
//end;
 
function GetDataDir(Param: String): String;
begin
  { Return the selected DataDir }
  Result := DataDirPage.Values[0];
end;
 
function GetDefaultDataDirectory() : String;
begin
  Result := ExpandConstant('{localappdata}\{#MyShortAppName}');
end;
 
function GetIniFilename() : String;
begin
    Result :=  WizardDirValue() + '\{#MyShortAppName}.ini';
end;
 
  // custom wizard page setup, for OpenBabel and data dir.
procedure InitializeWizard;
var
  myLocalAppData: String;
begin
//  OpenBabelDirPage := CreateInputDirPage(
//    wpSelectDir,
//    '{#MyLongAppName} OpenBabel 3.1.1 Directory',
//    '',
//    'Please select a directory to install {#MyShortAppName} OpenBabel 3.1.1.',
//    False,
//    '{#MyShortAppName}'
//  );
//  OpenBabelDirPage.Add('');
 
//  OpenBabelDirPage.Values[0] := GetIniString('{#MyShortAppName}', '{#INI_OpenBabelDirKey}', GetDefaultOpenBabelDirectory(), GetIniFilename());
    
//  OpenBabelDataPage := CreateInputOptionPage(OpenBabelDirPage.ID,
//    'Install OpenBabel-3.1.1', 'OpenBabel for cluster optimization.',
//    'Should OpenBabel be installed? (May be necessary for cluster optimization)',
//    True, False);
//  OpenBabelDataPage.Add('Install');
//  OpenBabelDataPage.Add('Do not install');

//  OpenBabelDataPage.Values[1] := True;

  DataDirPage := CreateInputDirPage(
    wpSelectDir,
    '{#MyLongAppName} Samples Directory',
    '',
    'Please select a directory to install {#MyShortAppName} samples.',
    False,
    '{#MyShortAppName}'
  );
  DataDirPage.Add('');
 
  DataDirPage.Values[0] := GetIniString('{#MyShortAppName}', '{#INI_DataDirKey}', GetDefaultDataDirectory(), GetIniFilename());

  SampleDataPage := CreateInputOptionPage(DataDirPage.ID,
    'Install Sample Data', 'The sample data enable to check the application.',
    'Should the sample data be installed?( Recommended for new users )',
    True, False);
  SampleDataPage.Add('Install');
  SampleDataPage.Add('Do not install');

  SampleDataPage.Values[1] := True;
  
end;

 
//function OpenBabelDirExists(): Boolean;
//begin
//  { Find out if Open Babel dir already exists }
//  Result := DirExists(GetOpenBabelDir('{#OPENBABEL_DIR}'));
//end;
 
function DataDirExists(): Boolean;
begin
  { Find out if data dir already exists }
  Result := DirExists(GetDataDir(''));
end;

//function InstallOpenBabel(): Boolean;
//begin
//  { Return the value of the 'install' radiobutton }
//  //MsgBox('InstallOpenBabel.', mbError, MB_OK);
//  Result := OpenBabelDataPage.Values[0];
//end;

function InstallSampleData(): Boolean;
begin
  { Return the value of the 'install' radiobutton }
  //MsgBox('InstallSampleData.', mbError, MB_OK);
  Result := SampleDataPage.Values[0];
end;

// Function for checking whether BABEL_DATADIR is added to user variables or not
//function NeedsAddBabelDatadir(Param: string): boolean;
//var
//  OrigVar: string;
//begin
//  if not RegQueryStringValue(HKEY_CURRENT_USER,
//    'Environment',
//    'BABEL_DATADIR', OrigVar)
//  then begin
//    Result := True;
//    exit;
//  end;
//  { look for the path with leading and trailing semicolon }
//  { Pos() returns 0 if not found }
//  Result := Pos(';' + Param + ';', ';' + OrigVar + ';') = 0;
//end;


[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
